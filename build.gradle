buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.114'
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'eclipse'
	id 'maven-publish'
	id 'signing'
	id "org.cadixdev.licenser" version "0.5.0"
	id "fabric-loom" version "0.6-SNAPSHOT"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "4.6.4"
group = 'RebornCore'

def ENV = System.getenv()
def build_number = ENV.BUILD_NUMBER ?: "local"
version = "${version}+build.$build_number"

license {
	header file('HEADER')
	include '**/*.java'
	ignoreFailures = true //Stops the build from failing if a file does not have a license header
}

dependencies {
	minecraft "com.mojang:minecraft:21w06a"
	mappings "net.fabricmc:yarn:21w06a+build.8:v2"
	modImplementation "net.fabricmc:fabric-loader:0.11.1"

	//Fabric api
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.30.2+1.17"

	modApi 'teamreborn:energy:0.1.1'
	include 'teamreborn:energy:0.1.1'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = 8
	}
}

java {
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

if (ENV.SIGNING_KEY) {
	signing {
		useInMemoryPgpKeys(ENV.SIGNING_KEY, ENV.SIGNING_PASSWORD)

		sign publishing.publications.mavenJava
		sign remapJar
	}

	task signAll(dependsOn: [signMavenJavaPublication, signRemapJar, remapJar])
}

curseforge {
	if (ENV.CURSEFORGE_API_KEY) {
		apiKey = ENV.CURSEFORGE_API_KEY
	}

	project {
		id = "237903"
		changelog = "A changelog can be found at https://github.com/TechReborn/RebornCore"
		releaseType = ENV.RELEASE_CHANNEL ?: "release"
		addGameVersion "21w06a"
		addGameVersion "Fabric"

		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}

	options {
		forgeGradleIntegration = false
	}
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	return "unknown"
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: remapJar) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("${archivesBaseName}-${version}")
		releaseBuilder.body("A changelog can be found at https://github.com/TechReborn/RebornCore")
		releaseBuilder.commitish(getBranch())

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("http://maven.modmuss50.me/RebornCore/RebornCore-1.17/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

if (ENV.SIGNING_KEY) {
	publish.dependsOn signAll
}
github.mustRunAfter checkVersion
publish.mustRunAfter checkVersion
project.tasks.curseforge.mustRunAfter checkVersion
